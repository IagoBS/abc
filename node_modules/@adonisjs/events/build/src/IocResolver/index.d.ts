/// <reference path="../../adonis-typings/events.d.ts" />
import { IocContract } from '@adonisjs/fold';
import { AnyHandler, EventHandler } from '@ioc:Adonis/Core/Event';
/**
 * Resolves string based event listeners from the IoC container. Also this method wraps
 * the IoC container bindings in a closure. That closure is later used to remove
 * the event listeners properly.
 */
export declare class IocResolver {
    private eventHandlers;
    private anyHandlers;
    private containerResolver;
    private listenersBaseNamespace?;
    constructor(container: IocContract);
    /**
     * Returns the listener by resolving the namespace from the IoC container
     */
    private getReferenceListener;
    /**
     * Returns all handlers for a given event.
     */
    private getHandlersFor;
    /**
     * Define custom namespace for Event listeners
     */
    namespace(namespace: string): void;
    /**
     * Returns event handler callback for an IoC container string reference.
     * Adding same handler for the same event is noop.
     */
    getEventHandler(event: string, handler: string): EventHandler;
    /**
     * Removes the event handler from the tracked list and also returns
     * it back.
     */
    removeEventHandler(event: string, handler: string): EventHandler | null;
    /**
     * Returns Event handler for wildcard events. Adding the same
     * handler for multiple times is a noop.
     */
    getAnyHandler(handler: string): AnyHandler;
    /**
     * Removes and returns the handler for a string reference.
     */
    removeAnyHandler(handler: string): AnyHandler | null;
}
