/// <reference path="../../adonis-typings/events.d.ts" />
import { IocContract } from '@adonisjs/fold';
import { EventData, AnyHandler, EventHandler, EmitterContract, EmitterTransportContract } from '@ioc:Adonis/Core/Event';
/**
 * Emitter class exposes the API for async event emitter built on top of
 * Emittery. It also exposes an API to pre-define the Typescript types
 * for different events.
 */
export declare class Emitter<T extends any = any> implements EmitterContract<T> {
    transport: EmitterTransportContract;
    private iocResolver;
    constructor(container: IocContract);
    /**
     * Define event handler for a given event
     */
    on<K extends keyof T>(event: K, handler: EventHandler<T[K]> | string): this;
    on<K extends string>(event: K, handler: EventHandler<EventData<T, K>> | string): this;
    /**
     * Define event handler for a given event and to be called
     * only once.
     */
    once<K extends keyof T>(event: K, handler: EventHandler<T[K]> | string): this;
    once<K extends string>(event: K, handler: EventHandler<EventData<T, K>> | string): this;
    /**
     * Define catch all event handler to listen for all events.
     */
    onAny(handler: AnyHandler | string): this;
    /**
     * Emit event
     */
    emit<K extends keyof T>(event: K, data: T[K]): Promise<void>;
    emit<K extends string>(event: K, data: EventData<T, K>): Promise<void>;
    /**
     * Remove existing event listener
     */
    off<K extends keyof T>(event: K, handler: EventHandler | string): void;
    off<K extends string>(event: K, handler: EventHandler | string): void;
    /**
     * Remove existing event listener for catch all handler
     */
    offAny(handler: AnyHandler | string): void;
    /**
     * Remove existing event listener.
     * @alias off
     */
    clearListener<K extends keyof T>(event: K, handler: EventHandler | string): void;
    clearListener<K extends string>(event: K, handler: EventHandler | string): void;
    /**
     * Clear all listeners for a given event
     */
    clearListeners<K extends keyof T>(event: K): void;
    clearListeners<K extends string>(event: K): void;
    /**
     * Clear all listeners for all events
     */
    clearAllListeners(): void;
    /**
     * Returns count of listeners for a given event or all
     * events.
     */
    listenerCount<K extends keyof T>(event?: K): number;
    listenerCount<K extends string>(event?: K): number;
    /**
     * Returns a boolean telling if listeners count for a given
     * event or all events is greater than 0 or not.
     */
    hasListeners<K extends keyof T>(event?: K): boolean;
    hasListeners<K extends string>(event?: K): boolean;
    /**
     * Define custom namespace for event listeners. It is set to `App/Listeners`
     * by default.
     */
    namespace(namespace: string): this;
}
