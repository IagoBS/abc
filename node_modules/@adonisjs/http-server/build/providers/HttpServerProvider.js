"use strict";
/**
 * @adonisjs/http-server
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Server_1 = require("../src/Server");
const Request_1 = require("../src/Request");
const Response_1 = require("../src/Response");
const HttpContext_1 = require("../src/HttpContext");
const MiddlewareStore_1 = require("../src/MiddlewareStore");
class HttpServerProvider {
    constructor($container) {
        this.$container = $container;
    }
    /**
     * Register request and response bindings to the container
     */
    $registerRequestResponse() {
        this.$container.bind('Adonis/Core/Request', () => Request_1.Request);
        this.$container.bind('Adonis/Core/Response', () => Response_1.Response);
    }
    /**
     * Registering middleware store to the container
     */
    $registerMiddlewareStore() {
        this.$container.bind('Adonis/Core/MiddlewareStore', () => MiddlewareStore_1.MiddlewareStore);
    }
    /**
     * Registering the HTTP context
     */
    $registerHTTPContext() {
        this.$container.bind('Adonis/Core/HttpContext', () => HttpContext_1.HttpContext);
    }
    /**
     * Register the HTTP server
     */
    $registerHttpServer() {
        this.$container.singleton('Adonis/Core/Server', () => {
            const Logger = this.$container.use('Adonis/Core/Logger');
            const Profiler = this.$container.use('Adonis/Core/Profiler');
            const Config = this.$container.use('Adonis/Core/Config');
            const Encryption = this.$container.use('Adonis/Core/Encryption');
            const config = Object.assign({ secret: Config.get('app.appKey') }, Config.get('app.http', {}));
            return new Server_1.Server(this.$container, Logger, Profiler, Encryption, config);
        });
    }
    /**
     * Register the router. The router points to the instance of router used
     * by the middleware
     */
    $registerRouter() {
        this.$container.singleton('Adonis/Core/Route', () => {
            return this.$container.use('Adonis/Core/Server').router;
        });
    }
    /**
     * Registering all bindings
     */
    register() {
        this.$registerRequestResponse();
        this.$registerMiddlewareStore();
        this.$registerHttpServer();
        this.$registerHTTPContext();
        this.$registerRouter();
    }
}
exports.default = HttpServerProvider;
